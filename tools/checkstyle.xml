<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <!--module name="com.decisionsoft.codequality.ClassFilter">
      <property name="fileMatch" value="unitTests[\\/]"/>
      <property name="testsMatch" value="com.puppycrawl.tools.checkstyle.checks.javadoc.PackageHtmlCheck"/-->
    <!--suppress checks="com.puppycrawl.tools.checkstyle.checks.javadoc.PackageHtmlCheck"
              files="unitTests[\\/]"/-->
    <!--/module-->
    <!--module name="com.decisionsoft.codequality.ClassFilter">
      <property name="fileMatch" value="functionalTests[\\/]"/>
      <property name="testsMatch" value="com.puppycrawl.tools.checkstyle.checks.javadoc.PackageHtmlCheck"/-->
    <!--suppress checks="com.puppycrawl.tools.checkstyle.checks.javadoc.PackageHtmlCheck"
              files="unitTests[\\/]"/-->
    <!--/module-->

    <module name="SuppressionCommentFilter"/>

    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CSOFF\: ([\w\|]+|\.\*)"/>
      <property name="onCommentFormat" value="CSON\: ([\w\|]+|\.\*)"/>
      <property name="checkFormat" value="$1"/>
    </module>

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
    <!--module name="PackageHtml"/-->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <!--module name="NewlineAtEndOfFile">
      <property name="lineSeparator" value="lf"/>
    </module-->

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <!--module name="Translation"/-->

    <module name="FileTabCharacter"/>

    <module name="TreeWalker">

        <module name="FileContentsHolder"/>
        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!--module name="JavadocMethod">
          <-property name="scope" value="public"/>
          <property name="allowUndeclaredRTE" value="true"/->

          <- Checkstyle doesn't understand inheritance ->
          <property name="allowMissingParamTags" value="true"/>
          <property name="allowMissingReturnTag" value="true"/>
          <property name="allowMissingThrowsTags" value="true"/>
        </module-->

        <module name="JavadocType">
          <property name="scope" value="package"/><!-- Exempt private nested classes https://bugs.corefiling.com/show_bug.cgi?id=40010 -->
          <property name="allowMissingParamTags" value="true"/><!-- https://spidermonkey.corefiling.com/bugs/show_bug.cgi?id=4204 -->
          <property name="allowUnknownTags" value="true"/><!-- Ignore problems caused by the presence of @rcsid javadoc tags. -->
        </module>
        <!--module name="JavadocVariable"/-->
        <module name="JavadocStyle"/>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName">
          <property name="format" value="^_[a-z][a-zA-Z0-9]*$"/> <!-- all member variables must begin with underscore-->
        </module>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName">
          <property name="format" value="^_[a-z][a-zA-Z0-9]*$"/> <!-- all static member variables must begin with underscore-->
        </module>
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project. See property      -->
            <!-- expansion,                                             -->
            <!-- http://checkstyle.sf.net/config.html#properties        -->
            <!-- <property                                              -->
            <!--     name="headerFile"                                  -->
            <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports">
          <property name="processJavadoc" value="true"/>
        </module>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <!--<module name="FileLength"> don't check the file length as some of our auto generated code breaks it.
          <property name="max" value="3000"/>
        </module>-->
        <!--<module name="LineLength"/> We don't check line length -->
        <module name="MethodLength"/>
        <module name="ParameterNumber">
          <property name="max" value="8"/>
        </module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad">
          <property name="option" value="nospace"/>
        </module>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
          <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN,  TYPE_EXTENSION_AND"/>
        </module>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <!--<module name="RedundantModifier"/> Apparently some people like putting redundant information on their interfaces-->


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
          <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="EmptyBlock"> <!--Allow empty catch blocks-->
          <property name="option" value="text"/>
          <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT"/>
        </module>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly">
          <property name="option" value="alone"/>
        </module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--<module name="AvoidInlineConditionals"/> We like inline conditionals-->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField"/>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <module name="MissingSwitchDefault"/>
        <!--<module name="RedundantThrows"/> This seems to be buggy at the moment see http://sourceforge.net/tracker/index.php?func=detail&aid=748678&group_id=80344&atid=559494 for discussion-->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!--<module name="DesignForExtension"/> This has been replaced with com.decisionsoft.shared.codequality.FilteredDesignForExtensionCheck which does not process classes that implement designed for extension-->
        <!--module name="com.decisionsoft.codequality.FilteredDesignForExtensionCheck"/-->
        <!--module name="FinalClass"/ - arc has a nested class example where this is silly -->

        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier"/>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="FinalParameters"/>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>
        <!--<module name="TodoComment"/> Allow todos for non release-->
        <module name="UpperEll"/>

        <!-- Ban forcing garbage collection in production code -->
        <module name="RegexpSinglelineJava">
          <property name="format" value="System\.gc\(\)"/>
          <property name="ignoreComments" value="true"/>
          <property name="message" value="Do not call gc in production code, it can slow things down dramatically"/>
        </module>

        <!-- String literal equality check. -->
        <module name="DescendantToken">
          <!--message key="com.corefiling.string.equality" value="Strings must not be compared with =="/-->
          <property name="tokens" value="EQUAL,NOT_EQUAL"/>
          <property name="limitedTokens" value="STRING_LITERAL"/>
          <property name="maximumNumber" value="0"/>
          <property name="maximumDepth" value="1"/>
          <message key="descendant.token.max" value="Strings must not be compared with =="/>
        </module>
    </module>
</module>