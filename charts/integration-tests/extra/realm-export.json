{
  "id": "master",
  "realm": "master",
  "displayName": "Keycloak",
  "displayNameHtml": "Keycloak",
  "enabled": true,
  "sslRequired": "external",
  "roles": {
    "client": {
      "service-under-test": [
        {
          "name": "internal",
          "scopeParamRequired": false,
          "composite": true,
          "composites": {
            "client": {
              "service-under-test": [
                "example-role"
              ]
            }
          },
          "clientRole": true
        },
        {
          "name": "example-role",
          "scopeParamRequired": false,
          "composite": false,
          "clientRole": true
        }
      ]
    }
  },
  "clients": [
    {
      "clientId": "integration-tests",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "integration-tests-secret",
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": false,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": true,
      "publicClient": false,
      "protocol": "openid-connect",
      "fullScopeAllowed": true,
      "authorizationServicesEnabled": true,
      "authorizationSettings": {
        "allowRemoteResourceManagement": true,
        "policyEnforcementMode": "ENFORCING",
        "policies": [
          {
            "name": "integration-tests-policy",
            "type": "js",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "code": "function parseQuery(qstr) {\n  var query = {};\n  (qstr[0] === '?' ? qstr.substr(1) : qstr)\n  .split('&').map(function (kv) {\n    return kv.split('=').map(decodeURIComponent);\n  }).forEach(function (kv) {\n    var newVal = kv[1] || true;\n    if (!query.hasOwnProperty(kv[0])) {\n      query[kv[0]] = newVal;\n      return;\n    }\n    var val = query[kv[0]];\n    Array.isArray(val) ? val.push(newVal) : query[kv[0]] = [val, newVal];\n  });\n  return query;\n}\n\nvar resourceUri = $evaluation.getPermission().getResource().getUri();\nvar query = parseQuery(resourceUri.match(/([^\\?#]*)([^\\#]*)/)[2]);\nif (!query.protected) {\n  $evaluation.grant();\n}\nelse if (!query.user) {\n  $evaluation.deny();\n}\nelse {\n  var username = $evaluation.getContext().getIdentity().getAttributes().getValue('preferred_username').asString(0);\n  var usersWithPermission = Array.isArray(query.user) ? query.user : [query.user];\n  usersWithPermission.indexOf(username) >= 0 ? $evaluation.grant() : $evaluation.deny();\n}\n"
            }
          },
          {
            "name": "Filing version permission",
            "type": "resource",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "defaultResourceType": "urn:platform.corefiling.com:filing-version",
              "applyPolicies": "[\"integration-tests-policy\"]"
            }
          }
        ],
        "scopes": [
          {
            "name": "urn:platform.corefiling.com:scope:filing-version:read"
          }
        ]
      }
    },
    {
      "clientId": "integration-tests-login",
      "enabled": true,
      "consentRequired": false,
      "directAccessGrantsEnabled": true,
      "publicClient": true,
      "protocol": "openid-connect",
      "fullScopeAllowed": true
    },
    {
      "clientId": "service-under-test",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "service-under-test-secret",
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": false,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": true,
      "publicClient": false,
      "protocol": "openid-connect",
      "fullScopeAllowed": true
    }
  ],
  "users": [
    {
      "username": "service-account-integration-tests",
      "enabled": true,
      "serviceAccountClientId": "integration-tests",
      "credentials": [],
      "requiredActions": [],
      "realmRoles" : [
        "offline_access",
        "uma_authorization"
      ],
      "clientRoles": {
        "service-under-test": [ "internal" ],
        "integration-tests": [ "uma_protection" ]
      }
    },
    {
      "username": "no-roles",
      "enabled": true,
      "credentials": [
        {
          "type": "password",
          "value": "password"
        }
      ]
    }
  ],
  "keycloakVersion": "3.2.0.Final"
}
